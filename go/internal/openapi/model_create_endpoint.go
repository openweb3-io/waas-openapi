/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEndpoint{}

// CreateEndpoint struct for CreateEndpoint
type CreateEndpoint struct {
	// The description of the endpoint
	Description *string `json:"description,omitempty"`
	// The disabled of the endpoint
	Disabled *bool `json:"disabled,omitempty"`
	// The event types of the endpoint
	EventTypes []string `json:"eventTypes"`
	// The uid of the endpoint
	Uid *string `json:"uid,omitempty"`
	// The url of the endpoint
	Url string `json:"url"`
}

type _CreateEndpoint CreateEndpoint

// NewCreateEndpoint instantiates a new CreateEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEndpoint(eventTypes []string, url string) *CreateEndpoint {
	this := CreateEndpoint{}
	this.EventTypes = eventTypes
	this.Url = url
	return &this
}

// NewCreateEndpointWithDefaults instantiates a new CreateEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEndpointWithDefaults() *CreateEndpoint {
	this := CreateEndpoint{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateEndpoint) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEndpoint) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateEndpoint) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateEndpoint) SetDescription(v string) {
	o.Description = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *CreateEndpoint) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEndpoint) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *CreateEndpoint) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *CreateEndpoint) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetEventTypes returns the EventTypes field value
func (o *CreateEndpoint) GetEventTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *CreateEndpoint) GetEventTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *CreateEndpoint) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *CreateEndpoint) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEndpoint) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *CreateEndpoint) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *CreateEndpoint) SetUid(v string) {
	o.Uid = &v
}

// GetUrl returns the Url field value
func (o *CreateEndpoint) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateEndpoint) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateEndpoint) SetUrl(v string) {
	o.Url = v
}

func (o CreateEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	toSerialize["eventTypes"] = o.EventTypes
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *CreateEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventTypes",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateEndpoint := _CreateEndpoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateEndpoint)

	if err != nil {
		return err
	}

	*o = CreateEndpoint(varCreateEndpoint)

	return err
}

type NullableCreateEndpoint struct {
	value *CreateEndpoint
	isSet bool
}

func (v NullableCreateEndpoint) Get() *CreateEndpoint {
	return v.value
}

func (v *NullableCreateEndpoint) Set(val *CreateEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEndpoint(val *CreateEndpoint) *NullableCreateEndpoint {
	return &NullableCreateEndpoint{value: val, isSet: true}
}

func (v NullableCreateEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


