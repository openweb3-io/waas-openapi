/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Transaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transaction{}

// Transaction struct for Transaction
type Transaction struct {
	// Asset ID
	AssetId string `json:"assetId"`
	// Chain
	Chain string `json:"chain"`
	// Chain ID
	ChainId string `json:"chainId"`
	// Confirmed number
	ConfirmedNum int32 `json:"confirmedNum"`
	// Created time
	CreatedAt string `json:"createdAt"`
	// Description
	Description string `json:"description"`
	Destination *TransactionEndpoint `json:"destination,omitempty"`
	// Extra
	Extra map[string]interface{} `json:"extra,omitempty"`
	// Failed reason
	FailedReason string `json:"failedReason"`
	Fee *Fee `json:"fee,omitempty"`
	// Transaction hash
	Hash string `json:"hash"`
	// Transaction ID
	Id string `json:"id"`
	// Signature
	Signature string `json:"signature"`
	Source *TransactionEndpoint `json:"source,omitempty"`
	// Transaction status
	Status string `json:"status"`
	// Token ID
	TokenId string `json:"tokenId"`
	Type TransactionType `json:"type"`
	// The custom unique transaction identifier
	Uid *string `json:"uid,omitempty"`
	// Updated time
	UpdatedAt string `json:"updatedAt"`
	// Wallet ID
	WalletId string `json:"walletId"`
}

type _Transaction Transaction

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(assetId string, chain string, chainId string, confirmedNum int32, createdAt string, description string, failedReason string, hash string, id string, signature string, status string, tokenId string, type_ TransactionType, updatedAt string, walletId string) *Transaction {
	this := Transaction{}
	this.AssetId = assetId
	this.Chain = chain
	this.ChainId = chainId
	this.ConfirmedNum = confirmedNum
	this.CreatedAt = createdAt
	this.Description = description
	this.FailedReason = failedReason
	this.Hash = hash
	this.Id = id
	this.Signature = signature
	this.Status = status
	this.TokenId = tokenId
	this.Type = type_
	this.UpdatedAt = updatedAt
	this.WalletId = walletId
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetAssetId returns the AssetId field value
func (o *Transaction) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *Transaction) SetAssetId(v string) {
	o.AssetId = v
}

// GetChain returns the Chain field value
func (o *Transaction) GetChain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *Transaction) SetChain(v string) {
	o.Chain = v
}

// GetChainId returns the ChainId field value
func (o *Transaction) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *Transaction) SetChainId(v string) {
	o.ChainId = v
}

// GetConfirmedNum returns the ConfirmedNum field value
func (o *Transaction) GetConfirmedNum() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConfirmedNum
}

// GetConfirmedNumOk returns a tuple with the ConfirmedNum field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetConfirmedNumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfirmedNum, true
}

// SetConfirmedNum sets field value
func (o *Transaction) SetConfirmedNum(v int32) {
	o.ConfirmedNum = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Transaction) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Transaction) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *Transaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Transaction) SetDescription(v string) {
	o.Description = v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *Transaction) GetDestination() TransactionEndpoint {
	if o == nil || IsNil(o.Destination) {
		var ret TransactionEndpoint
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetDestinationOk() (*TransactionEndpoint, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *Transaction) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given TransactionEndpoint and assigns it to the Destination field.
func (o *Transaction) SetDestination(v TransactionEndpoint) {
	o.Destination = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *Transaction) GetExtra() map[string]interface{} {
	if o == nil || IsNil(o.Extra) {
		var ret map[string]interface{}
		return ret
	}
	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetExtraOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Extra) {
		return map[string]interface{}{}, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *Transaction) HasExtra() bool {
	if o != nil && !IsNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given map[string]interface{} and assigns it to the Extra field.
func (o *Transaction) SetExtra(v map[string]interface{}) {
	o.Extra = v
}

// GetFailedReason returns the FailedReason field value
func (o *Transaction) GetFailedReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailedReason
}

// GetFailedReasonOk returns a tuple with the FailedReason field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetFailedReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedReason, true
}

// SetFailedReason sets field value
func (o *Transaction) SetFailedReason(v string) {
	o.FailedReason = v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *Transaction) GetFee() Fee {
	if o == nil || IsNil(o.Fee) {
		var ret Fee
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetFeeOk() (*Fee, bool) {
	if o == nil || IsNil(o.Fee) {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *Transaction) HasFee() bool {
	if o != nil && !IsNil(o.Fee) {
		return true
	}

	return false
}

// SetFee gets a reference to the given Fee and assigns it to the Fee field.
func (o *Transaction) SetFee(v Fee) {
	o.Fee = &v
}

// GetHash returns the Hash field value
func (o *Transaction) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *Transaction) SetHash(v string) {
	o.Hash = v
}

// GetId returns the Id field value
func (o *Transaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transaction) SetId(v string) {
	o.Id = v
}

// GetSignature returns the Signature field value
func (o *Transaction) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *Transaction) SetSignature(v string) {
	o.Signature = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Transaction) GetSource() TransactionEndpoint {
	if o == nil || IsNil(o.Source) {
		var ret TransactionEndpoint
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSourceOk() (*TransactionEndpoint, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Transaction) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given TransactionEndpoint and assigns it to the Source field.
func (o *Transaction) SetSource(v TransactionEndpoint) {
	o.Source = &v
}

// GetStatus returns the Status field value
func (o *Transaction) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transaction) SetStatus(v string) {
	o.Status = v
}

// GetTokenId returns the TokenId field value
func (o *Transaction) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *Transaction) SetTokenId(v string) {
	o.TokenId = v
}

// GetType returns the Type field value
func (o *Transaction) GetType() TransactionType {
	if o == nil {
		var ret TransactionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*TransactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transaction) SetType(v TransactionType) {
	o.Type = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Transaction) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Transaction) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *Transaction) SetUid(v string) {
	o.Uid = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Transaction) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Transaction) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetWalletId returns the WalletId field value
func (o *Transaction) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *Transaction) SetWalletId(v string) {
	o.WalletId = v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assetId"] = o.AssetId
	toSerialize["chain"] = o.Chain
	toSerialize["chainId"] = o.ChainId
	toSerialize["confirmedNum"] = o.ConfirmedNum
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["description"] = o.Description
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}
	toSerialize["failedReason"] = o.FailedReason
	if !IsNil(o.Fee) {
		toSerialize["fee"] = o.Fee
	}
	toSerialize["hash"] = o.Hash
	toSerialize["id"] = o.Id
	toSerialize["signature"] = o.Signature
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["status"] = o.Status
	toSerialize["tokenId"] = o.TokenId
	toSerialize["type"] = o.Type
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["walletId"] = o.WalletId
	return toSerialize, nil
}

func (o *Transaction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assetId",
		"chain",
		"chainId",
		"confirmedNum",
		"createdAt",
		"description",
		"failedReason",
		"hash",
		"id",
		"signature",
		"status",
		"tokenId",
		"type",
		"updatedAt",
		"walletId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransaction := _Transaction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransaction)

	if err != nil {
		return err
	}

	*o = Transaction(varTransaction)

	return err
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


