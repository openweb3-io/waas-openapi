/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateTokenRequest{}

// UpdateTokenRequest struct for UpdateTokenRequest
type UpdateTokenRequest struct {
	// Token ID
	Id string `json:"id"`
	// Token name
	Name *string `json:"name,omitempty"`
	// Unique ID
	Uid *string `json:"uid,omitempty"`
}

type _UpdateTokenRequest UpdateTokenRequest

// NewUpdateTokenRequest instantiates a new UpdateTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTokenRequest(id string) *UpdateTokenRequest {
	this := UpdateTokenRequest{}
	this.Id = id
	return &this
}

// NewUpdateTokenRequestWithDefaults instantiates a new UpdateTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTokenRequestWithDefaults() *UpdateTokenRequest {
	this := UpdateTokenRequest{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateTokenRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateTokenRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateTokenRequest) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateTokenRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTokenRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateTokenRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateTokenRequest) SetName(v string) {
	o.Name = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UpdateTokenRequest) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTokenRequest) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UpdateTokenRequest) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UpdateTokenRequest) SetUid(v string) {
	o.Uid = &v
}

func (o UpdateTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

func (o *UpdateTokenRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateTokenRequest := _UpdateTokenRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateTokenRequest)

	if err != nil {
		return err
	}

	*o = UpdateTokenRequest(varUpdateTokenRequest)

	return err
}

type NullableUpdateTokenRequest struct {
	value *UpdateTokenRequest
	isSet bool
}

func (v NullableUpdateTokenRequest) Get() *UpdateTokenRequest {
	return v.value
}

func (v *NullableUpdateTokenRequest) Set(val *UpdateTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTokenRequest(val *UpdateTokenRequest) *NullableUpdateTokenRequest {
	return &NullableUpdateTokenRequest{value: val, isSet: true}
}

func (v NullableUpdateTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


