/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SignMessageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignMessageRequest{}

// SignMessageRequest struct for SignMessageRequest
type SignMessageRequest struct {
	// Chain ID
	ChainId string `json:"chain_id"`
	// tx message content
	Message string `json:"message"`
	Source SignMessageRequestSource `json:"source"`
}

type _SignMessageRequest SignMessageRequest

// NewSignMessageRequest instantiates a new SignMessageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignMessageRequest(chainId string, message string, source SignMessageRequestSource) *SignMessageRequest {
	this := SignMessageRequest{}
	this.ChainId = chainId
	this.Message = message
	this.Source = source
	return &this
}

// NewSignMessageRequestWithDefaults instantiates a new SignMessageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignMessageRequestWithDefaults() *SignMessageRequest {
	this := SignMessageRequest{}
	return &this
}

// GetChainId returns the ChainId field value
func (o *SignMessageRequest) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *SignMessageRequest) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *SignMessageRequest) SetChainId(v string) {
	o.ChainId = v
}

// GetMessage returns the Message field value
func (o *SignMessageRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SignMessageRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SignMessageRequest) SetMessage(v string) {
	o.Message = v
}

// GetSource returns the Source field value
func (o *SignMessageRequest) GetSource() SignMessageRequestSource {
	if o == nil {
		var ret SignMessageRequestSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *SignMessageRequest) GetSourceOk() (*SignMessageRequestSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *SignMessageRequest) SetSource(v SignMessageRequestSource) {
	o.Source = v
}

func (o SignMessageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignMessageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chain_id"] = o.ChainId
	toSerialize["message"] = o.Message
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *SignMessageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chain_id",
		"message",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignMessageRequest := _SignMessageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignMessageRequest)

	if err != nil {
		return err
	}

	*o = SignMessageRequest(varSignMessageRequest)

	return err
}

type NullableSignMessageRequest struct {
	value *SignMessageRequest
	isSet bool
}

func (v NullableSignMessageRequest) Get() *SignMessageRequest {
	return v.value
}

func (v *NullableSignMessageRequest) Set(val *SignMessageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSignMessageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSignMessageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignMessageRequest(val *SignMessageRequest) *NullableSignMessageRequest {
	return &NullableSignMessageRequest{value: val, isSet: true}
}

func (v NullableSignMessageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignMessageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


