/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateTransferRequestDestination - The ID of the wallet to which the transfer will be made
type CreateTransferRequestDestination struct {
	TransferDestinationAddress *TransferDestinationAddress
}

// TransferDestinationAddressAsCreateTransferRequestDestination is a convenience function that returns TransferDestinationAddress wrapped in CreateTransferRequestDestination
func TransferDestinationAddressAsCreateTransferRequestDestination(v *TransferDestinationAddress) CreateTransferRequestDestination {
	return CreateTransferRequestDestination{
		TransferDestinationAddress: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateTransferRequestDestination) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TransferDestinationAddress
	err = newStrictDecoder(data).Decode(&dst.TransferDestinationAddress)
	if err == nil {
		jsonTransferDestinationAddress, _ := json.Marshal(dst.TransferDestinationAddress)
		if string(jsonTransferDestinationAddress) == "{}" { // empty struct
			dst.TransferDestinationAddress = nil
		} else {
			if err = validator.Validate(dst.TransferDestinationAddress); err != nil {
				dst.TransferDestinationAddress = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransferDestinationAddress = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TransferDestinationAddress = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateTransferRequestDestination)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateTransferRequestDestination)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateTransferRequestDestination) MarshalJSON() ([]byte, error) {
	if src.TransferDestinationAddress != nil {
		return json.Marshal(&src.TransferDestinationAddress)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateTransferRequestDestination) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransferDestinationAddress != nil {
		return obj.TransferDestinationAddress
	}

	// all schemas are nil
	return nil
}

type NullableCreateTransferRequestDestination struct {
	value *CreateTransferRequestDestination
	isSet bool
}

func (v NullableCreateTransferRequestDestination) Get() *CreateTransferRequestDestination {
	return v.value
}

func (v *NullableCreateTransferRequestDestination) Set(val *CreateTransferRequestDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTransferRequestDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTransferRequestDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTransferRequestDestination(val *CreateTransferRequestDestination) *NullableCreateTransferRequestDestination {
	return &NullableCreateTransferRequestDestination{value: val, isSet: true}
}

func (v NullableCreateTransferRequestDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTransferRequestDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


