/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// SignMessageRequestSource - The ID of the wallet from which the transfer will be made
type SignMessageRequestSource struct {
	TransferSourceWeb3 *TransferSourceWeb3
}

// TransferSourceWeb3AsSignMessageRequestSource is a convenience function that returns TransferSourceWeb3 wrapped in SignMessageRequestSource
func TransferSourceWeb3AsSignMessageRequestSource(v *TransferSourceWeb3) SignMessageRequestSource {
	return SignMessageRequestSource{
		TransferSourceWeb3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SignMessageRequestSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TransferSourceWeb3
	err = newStrictDecoder(data).Decode(&dst.TransferSourceWeb3)
	if err == nil {
		jsonTransferSourceWeb3, _ := json.Marshal(dst.TransferSourceWeb3)
		if string(jsonTransferSourceWeb3) == "{}" { // empty struct
			dst.TransferSourceWeb3 = nil
		} else {
			if err = validator.Validate(dst.TransferSourceWeb3); err != nil {
				dst.TransferSourceWeb3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransferSourceWeb3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TransferSourceWeb3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SignMessageRequestSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SignMessageRequestSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SignMessageRequestSource) MarshalJSON() ([]byte, error) {
	if src.TransferSourceWeb3 != nil {
		return json.Marshal(&src.TransferSourceWeb3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SignMessageRequestSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransferSourceWeb3 != nil {
		return obj.TransferSourceWeb3
	}

	// all schemas are nil
	return nil
}

type NullableSignMessageRequestSource struct {
	value *SignMessageRequestSource
	isSet bool
}

func (v NullableSignMessageRequestSource) Get() *SignMessageRequestSource {
	return v.value
}

func (v *NullableSignMessageRequestSource) Set(val *SignMessageRequestSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSignMessageRequestSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSignMessageRequestSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignMessageRequestSource(val *SignMessageRequestSource) *NullableSignMessageRequestSource {
	return &NullableSignMessageRequestSource{value: val, isSet: true}
}

func (v NullableSignMessageRequestSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignMessageRequestSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


