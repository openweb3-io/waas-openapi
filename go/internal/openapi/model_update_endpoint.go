/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEndpoint{}

// UpdateEndpoint struct for UpdateEndpoint
type UpdateEndpoint struct {
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	EventTypes []string `json:"eventTypes,omitempty"`
	Uid *string `json:"uid,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewUpdateEndpoint instantiates a new UpdateEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEndpoint() *UpdateEndpoint {
	this := UpdateEndpoint{}
	return &this
}

// NewUpdateEndpointWithDefaults instantiates a new UpdateEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEndpointWithDefaults() *UpdateEndpoint {
	this := UpdateEndpoint{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateEndpoint) SetDescription(v string) {
	o.Description = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UpdateEndpoint) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetEventTypes() []string {
	if o == nil || IsNil(o.EventTypes) {
		var ret []string
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetEventTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *UpdateEndpoint) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UpdateEndpoint) SetUid(v string) {
	o.Uid = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpdateEndpoint) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpoint) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateEndpoint) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpdateEndpoint) SetUrl(v string) {
	o.Url = &v
}

func (o UpdateEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableUpdateEndpoint struct {
	value *UpdateEndpoint
	isSet bool
}

func (v NullableUpdateEndpoint) Get() *UpdateEndpoint {
	return v.value
}

func (v *NullableUpdateEndpoint) Set(val *UpdateEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEndpoint(val *UpdateEndpoint) *NullableUpdateEndpoint {
	return &NullableUpdateEndpoint{value: val, isSet: true}
}

func (v NullableUpdateEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


