/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SweepAddressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SweepAddressRequest{}

// SweepAddressRequest struct for SweepAddressRequest
type SweepAddressRequest struct {
	// address to pay the fee
	FeeAddress string `json:"fee_address"`
	// max fee limit
	MaxFeeLimit *string `json:"max_fee_limit,omitempty"`
	// min collect amount
	MinCollectAmount *string `json:"min_collect_amount,omitempty"`
	// address to sweep to
	ToAddress string `json:"to_address"`
	// token id to sweep
	TokenId string `json:"token_id"`
}

type _SweepAddressRequest SweepAddressRequest

// NewSweepAddressRequest instantiates a new SweepAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSweepAddressRequest(feeAddress string, toAddress string, tokenId string) *SweepAddressRequest {
	this := SweepAddressRequest{}
	this.FeeAddress = feeAddress
	this.ToAddress = toAddress
	this.TokenId = tokenId
	return &this
}

// NewSweepAddressRequestWithDefaults instantiates a new SweepAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSweepAddressRequestWithDefaults() *SweepAddressRequest {
	this := SweepAddressRequest{}
	return &this
}

// GetFeeAddress returns the FeeAddress field value
func (o *SweepAddressRequest) GetFeeAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeeAddress
}

// GetFeeAddressOk returns a tuple with the FeeAddress field value
// and a boolean to check if the value has been set.
func (o *SweepAddressRequest) GetFeeAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeAddress, true
}

// SetFeeAddress sets field value
func (o *SweepAddressRequest) SetFeeAddress(v string) {
	o.FeeAddress = v
}

// GetMaxFeeLimit returns the MaxFeeLimit field value if set, zero value otherwise.
func (o *SweepAddressRequest) GetMaxFeeLimit() string {
	if o == nil || IsNil(o.MaxFeeLimit) {
		var ret string
		return ret
	}
	return *o.MaxFeeLimit
}

// GetMaxFeeLimitOk returns a tuple with the MaxFeeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SweepAddressRequest) GetMaxFeeLimitOk() (*string, bool) {
	if o == nil || IsNil(o.MaxFeeLimit) {
		return nil, false
	}
	return o.MaxFeeLimit, true
}

// HasMaxFeeLimit returns a boolean if a field has been set.
func (o *SweepAddressRequest) HasMaxFeeLimit() bool {
	if o != nil && !IsNil(o.MaxFeeLimit) {
		return true
	}

	return false
}

// SetMaxFeeLimit gets a reference to the given string and assigns it to the MaxFeeLimit field.
func (o *SweepAddressRequest) SetMaxFeeLimit(v string) {
	o.MaxFeeLimit = &v
}

// GetMinCollectAmount returns the MinCollectAmount field value if set, zero value otherwise.
func (o *SweepAddressRequest) GetMinCollectAmount() string {
	if o == nil || IsNil(o.MinCollectAmount) {
		var ret string
		return ret
	}
	return *o.MinCollectAmount
}

// GetMinCollectAmountOk returns a tuple with the MinCollectAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SweepAddressRequest) GetMinCollectAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MinCollectAmount) {
		return nil, false
	}
	return o.MinCollectAmount, true
}

// HasMinCollectAmount returns a boolean if a field has been set.
func (o *SweepAddressRequest) HasMinCollectAmount() bool {
	if o != nil && !IsNil(o.MinCollectAmount) {
		return true
	}

	return false
}

// SetMinCollectAmount gets a reference to the given string and assigns it to the MinCollectAmount field.
func (o *SweepAddressRequest) SetMinCollectAmount(v string) {
	o.MinCollectAmount = &v
}

// GetToAddress returns the ToAddress field value
func (o *SweepAddressRequest) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *SweepAddressRequest) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *SweepAddressRequest) SetToAddress(v string) {
	o.ToAddress = v
}

// GetTokenId returns the TokenId field value
func (o *SweepAddressRequest) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *SweepAddressRequest) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *SweepAddressRequest) SetTokenId(v string) {
	o.TokenId = v
}

func (o SweepAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SweepAddressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fee_address"] = o.FeeAddress
	if !IsNil(o.MaxFeeLimit) {
		toSerialize["max_fee_limit"] = o.MaxFeeLimit
	}
	if !IsNil(o.MinCollectAmount) {
		toSerialize["min_collect_amount"] = o.MinCollectAmount
	}
	toSerialize["to_address"] = o.ToAddress
	toSerialize["token_id"] = o.TokenId
	return toSerialize, nil
}

func (o *SweepAddressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fee_address",
		"to_address",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSweepAddressRequest := _SweepAddressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSweepAddressRequest)

	if err != nil {
		return err
	}

	*o = SweepAddressRequest(varSweepAddressRequest)

	return err
}

type NullableSweepAddressRequest struct {
	value *SweepAddressRequest
	isSet bool
}

func (v NullableSweepAddressRequest) Get() *SweepAddressRequest {
	return v.value
}

func (v *NullableSweepAddressRequest) Set(val *SweepAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSweepAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSweepAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSweepAddressRequest(val *SweepAddressRequest) *NullableSweepAddressRequest {
	return &NullableSweepAddressRequest{value: val, isSet: true}
}

func (v NullableSweepAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSweepAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


