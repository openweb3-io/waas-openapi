/*
 * WaaS OpenAPI Documentation
 *
 * This is a WaaS OpenAPI Server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransferDestination struct for TransferDestination
type TransferDestination struct {
	// Address
	Address *TransferDestinationAddress `json:"address,omitempty"`
	// Transfer destination type
	Type TransferDestinationType `json:"type"`
}

// NewTransferDestination instantiates a new TransferDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferDestination(type_ TransferDestinationType) *TransferDestination {
	this := TransferDestination{}
	this.Type = type_
	return &this
}

// NewTransferDestinationWithDefaults instantiates a new TransferDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferDestinationWithDefaults() *TransferDestination {
	this := TransferDestination{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TransferDestination) GetAddress() TransferDestinationAddress {
	if o == nil || o.Address == nil {
		var ret TransferDestinationAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferDestination) GetAddressOk() (*TransferDestinationAddress, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TransferDestination) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given TransferDestinationAddress and assigns it to the Address field.
func (o *TransferDestination) SetAddress(v TransferDestinationAddress) {
	o.Address = &v
}

// GetType returns the Type field value
func (o *TransferDestination) GetType() TransferDestinationType {
	if o == nil {
		var ret TransferDestinationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransferDestination) GetTypeOk() (*TransferDestinationType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransferDestination) SetType(v TransferDestinationType) {
	o.Type = v
}

func (o TransferDestination) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTransferDestination struct {
	value *TransferDestination
	isSet bool
}

func (v NullableTransferDestination) Get() *TransferDestination {
	return v.value
}

func (v *NullableTransferDestination) Set(val *TransferDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferDestination(val *TransferDestination) *NullableTransferDestination {
	return &NullableTransferDestination{value: val, isSet: true}
}

func (v NullableTransferDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


