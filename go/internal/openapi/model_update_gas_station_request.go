/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateGasStationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGasStationRequest{}

// UpdateGasStationRequest struct for UpdateGasStationRequest
type UpdateGasStationRequest struct {
	// Disabled
	Disabled *bool `json:"disabled,omitempty"`
	// Gas Capacity
	GasCapacity *string `json:"gas_capacity,omitempty"`
	// Gas Threshold
	GasThreshold *string `json:"gas_threshold,omitempty"`
	// Max Fee Limit
	MaxFeeLimit *string `json:"max_fee_limit,omitempty"`
}

// NewUpdateGasStationRequest instantiates a new UpdateGasStationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGasStationRequest() *UpdateGasStationRequest {
	this := UpdateGasStationRequest{}
	return &this
}

// NewUpdateGasStationRequestWithDefaults instantiates a new UpdateGasStationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGasStationRequestWithDefaults() *UpdateGasStationRequest {
	this := UpdateGasStationRequest{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UpdateGasStationRequest) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGasStationRequest) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UpdateGasStationRequest) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UpdateGasStationRequest) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetGasCapacity returns the GasCapacity field value if set, zero value otherwise.
func (o *UpdateGasStationRequest) GetGasCapacity() string {
	if o == nil || IsNil(o.GasCapacity) {
		var ret string
		return ret
	}
	return *o.GasCapacity
}

// GetGasCapacityOk returns a tuple with the GasCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGasStationRequest) GetGasCapacityOk() (*string, bool) {
	if o == nil || IsNil(o.GasCapacity) {
		return nil, false
	}
	return o.GasCapacity, true
}

// HasGasCapacity returns a boolean if a field has been set.
func (o *UpdateGasStationRequest) HasGasCapacity() bool {
	if o != nil && !IsNil(o.GasCapacity) {
		return true
	}

	return false
}

// SetGasCapacity gets a reference to the given string and assigns it to the GasCapacity field.
func (o *UpdateGasStationRequest) SetGasCapacity(v string) {
	o.GasCapacity = &v
}

// GetGasThreshold returns the GasThreshold field value if set, zero value otherwise.
func (o *UpdateGasStationRequest) GetGasThreshold() string {
	if o == nil || IsNil(o.GasThreshold) {
		var ret string
		return ret
	}
	return *o.GasThreshold
}

// GetGasThresholdOk returns a tuple with the GasThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGasStationRequest) GetGasThresholdOk() (*string, bool) {
	if o == nil || IsNil(o.GasThreshold) {
		return nil, false
	}
	return o.GasThreshold, true
}

// HasGasThreshold returns a boolean if a field has been set.
func (o *UpdateGasStationRequest) HasGasThreshold() bool {
	if o != nil && !IsNil(o.GasThreshold) {
		return true
	}

	return false
}

// SetGasThreshold gets a reference to the given string and assigns it to the GasThreshold field.
func (o *UpdateGasStationRequest) SetGasThreshold(v string) {
	o.GasThreshold = &v
}

// GetMaxFeeLimit returns the MaxFeeLimit field value if set, zero value otherwise.
func (o *UpdateGasStationRequest) GetMaxFeeLimit() string {
	if o == nil || IsNil(o.MaxFeeLimit) {
		var ret string
		return ret
	}
	return *o.MaxFeeLimit
}

// GetMaxFeeLimitOk returns a tuple with the MaxFeeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGasStationRequest) GetMaxFeeLimitOk() (*string, bool) {
	if o == nil || IsNil(o.MaxFeeLimit) {
		return nil, false
	}
	return o.MaxFeeLimit, true
}

// HasMaxFeeLimit returns a boolean if a field has been set.
func (o *UpdateGasStationRequest) HasMaxFeeLimit() bool {
	if o != nil && !IsNil(o.MaxFeeLimit) {
		return true
	}

	return false
}

// SetMaxFeeLimit gets a reference to the given string and assigns it to the MaxFeeLimit field.
func (o *UpdateGasStationRequest) SetMaxFeeLimit(v string) {
	o.MaxFeeLimit = &v
}

func (o UpdateGasStationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGasStationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.GasCapacity) {
		toSerialize["gas_capacity"] = o.GasCapacity
	}
	if !IsNil(o.GasThreshold) {
		toSerialize["gas_threshold"] = o.GasThreshold
	}
	if !IsNil(o.MaxFeeLimit) {
		toSerialize["max_fee_limit"] = o.MaxFeeLimit
	}
	return toSerialize, nil
}

type NullableUpdateGasStationRequest struct {
	value *UpdateGasStationRequest
	isSet bool
}

func (v NullableUpdateGasStationRequest) Get() *UpdateGasStationRequest {
	return v.value
}

func (v *NullableUpdateGasStationRequest) Set(val *UpdateGasStationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGasStationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGasStationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGasStationRequest(val *UpdateGasStationRequest) *NullableUpdateGasStationRequest {
	return &NullableUpdateGasStationRequest{value: val, isSet: true}
}

func (v NullableUpdateGasStationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGasStationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


