/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateTransferRequestSource - The ID of the wallet from which the transfer will be made
type CreateTransferRequestSource struct {
	TransferSourceAsset *TransferSourceAsset
	TransferSourceWeb3 *TransferSourceWeb3
}

// TransferSourceAssetAsCreateTransferRequestSource is a convenience function that returns TransferSourceAsset wrapped in CreateTransferRequestSource
func TransferSourceAssetAsCreateTransferRequestSource(v *TransferSourceAsset) CreateTransferRequestSource {
	return CreateTransferRequestSource{
		TransferSourceAsset: v,
	}
}

// TransferSourceWeb3AsCreateTransferRequestSource is a convenience function that returns TransferSourceWeb3 wrapped in CreateTransferRequestSource
func TransferSourceWeb3AsCreateTransferRequestSource(v *TransferSourceWeb3) CreateTransferRequestSource {
	return CreateTransferRequestSource{
		TransferSourceWeb3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateTransferRequestSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TransferSourceAsset
	err = newStrictDecoder(data).Decode(&dst.TransferSourceAsset)
	if err == nil {
		jsonTransferSourceAsset, _ := json.Marshal(dst.TransferSourceAsset)
		if string(jsonTransferSourceAsset) == "{}" { // empty struct
			dst.TransferSourceAsset = nil
		} else {
			if err = validator.Validate(dst.TransferSourceAsset); err != nil {
				dst.TransferSourceAsset = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransferSourceAsset = nil
	}

	// try to unmarshal data into TransferSourceWeb3
	err = newStrictDecoder(data).Decode(&dst.TransferSourceWeb3)
	if err == nil {
		jsonTransferSourceWeb3, _ := json.Marshal(dst.TransferSourceWeb3)
		if string(jsonTransferSourceWeb3) == "{}" { // empty struct
			dst.TransferSourceWeb3 = nil
		} else {
			if err = validator.Validate(dst.TransferSourceWeb3); err != nil {
				dst.TransferSourceWeb3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.TransferSourceWeb3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TransferSourceAsset = nil
		dst.TransferSourceWeb3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateTransferRequestSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateTransferRequestSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateTransferRequestSource) MarshalJSON() ([]byte, error) {
	if src.TransferSourceAsset != nil {
		return json.Marshal(&src.TransferSourceAsset)
	}

	if src.TransferSourceWeb3 != nil {
		return json.Marshal(&src.TransferSourceWeb3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateTransferRequestSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TransferSourceAsset != nil {
		return obj.TransferSourceAsset
	}

	if obj.TransferSourceWeb3 != nil {
		return obj.TransferSourceWeb3
	}

	// all schemas are nil
	return nil
}

type NullableCreateTransferRequestSource struct {
	value *CreateTransferRequestSource
	isSet bool
}

func (v NullableCreateTransferRequestSource) Get() *CreateTransferRequestSource {
	return v.value
}

func (v *NullableCreateTransferRequestSource) Set(val *CreateTransferRequestSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTransferRequestSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTransferRequestSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTransferRequestSource(val *CreateTransferRequestSource) *NullableCreateTransferRequestSource {
	return &NullableCreateTransferRequestSource{value: val, isSet: true}
}

func (v NullableCreateTransferRequestSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTransferRequestSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


