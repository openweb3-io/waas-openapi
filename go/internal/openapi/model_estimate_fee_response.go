/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EstimateFeeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EstimateFeeResponse{}

// EstimateFeeResponse struct for EstimateFeeResponse
type EstimateFeeResponse struct {
	// Amount
	Amount string `json:"amount"`
	// Token ID
	TokenId string `json:"token_id"`
}

type _EstimateFeeResponse EstimateFeeResponse

// NewEstimateFeeResponse instantiates a new EstimateFeeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateFeeResponse(amount string, tokenId string) *EstimateFeeResponse {
	this := EstimateFeeResponse{}
	this.Amount = amount
	this.TokenId = tokenId
	return &this
}

// NewEstimateFeeResponseWithDefaults instantiates a new EstimateFeeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateFeeResponseWithDefaults() *EstimateFeeResponse {
	this := EstimateFeeResponse{}
	return &this
}

// GetAmount returns the Amount field value
func (o *EstimateFeeResponse) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *EstimateFeeResponse) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *EstimateFeeResponse) SetAmount(v string) {
	o.Amount = v
}

// GetTokenId returns the TokenId field value
func (o *EstimateFeeResponse) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *EstimateFeeResponse) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *EstimateFeeResponse) SetTokenId(v string) {
	o.TokenId = v
}

func (o EstimateFeeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EstimateFeeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["token_id"] = o.TokenId
	return toSerialize, nil
}

func (o *EstimateFeeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"token_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEstimateFeeResponse := _EstimateFeeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEstimateFeeResponse)

	if err != nil {
		return err
	}

	*o = EstimateFeeResponse(varEstimateFeeResponse)

	return err
}

type NullableEstimateFeeResponse struct {
	value *EstimateFeeResponse
	isSet bool
}

func (v NullableEstimateFeeResponse) Get() *EstimateFeeResponse {
	return v.value
}

func (v *NullableEstimateFeeResponse) Set(val *EstimateFeeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateFeeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateFeeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateFeeResponse(val *EstimateFeeResponse) *NullableEstimateFeeResponse {
	return &NullableEstimateFeeResponse{value: val, isSet: true}
}

func (v NullableEstimateFeeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateFeeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


