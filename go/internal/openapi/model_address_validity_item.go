/*
WaaS OpenAPI Documentation

This is a WaaS OpenAPI Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressValidityItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressValidityItem{}

// AddressValidityItem struct for AddressValidityItem
type AddressValidityItem struct {
	// Address
	Address string `json:"address"`
	// Validity
	Validity bool `json:"validity"`
}

type _AddressValidityItem AddressValidityItem

// NewAddressValidityItem instantiates a new AddressValidityItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressValidityItem(address string, validity bool) *AddressValidityItem {
	this := AddressValidityItem{}
	this.Address = address
	this.Validity = validity
	return &this
}

// NewAddressValidityItemWithDefaults instantiates a new AddressValidityItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressValidityItemWithDefaults() *AddressValidityItem {
	this := AddressValidityItem{}
	return &this
}

// GetAddress returns the Address field value
func (o *AddressValidityItem) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddressValidityItem) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddressValidityItem) SetAddress(v string) {
	o.Address = v
}

// GetValidity returns the Validity field value
func (o *AddressValidityItem) GetValidity() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Validity
}

// GetValidityOk returns a tuple with the Validity field value
// and a boolean to check if the value has been set.
func (o *AddressValidityItem) GetValidityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Validity, true
}

// SetValidity sets field value
func (o *AddressValidityItem) SetValidity(v bool) {
	o.Validity = v
}

func (o AddressValidityItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressValidityItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["validity"] = o.Validity
	return toSerialize, nil
}

func (o *AddressValidityItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"validity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressValidityItem := _AddressValidityItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressValidityItem)

	if err != nil {
		return err
	}

	*o = AddressValidityItem(varAddressValidityItem)

	return err
}

type NullableAddressValidityItem struct {
	value *AddressValidityItem
	isSet bool
}

func (v NullableAddressValidityItem) Get() *AddressValidityItem {
	return v.value
}

func (v *NullableAddressValidityItem) Set(val *AddressValidityItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressValidityItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressValidityItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressValidityItem(val *AddressValidityItem) *NullableAddressValidityItem {
	return &NullableAddressValidityItem{value: val, isSet: true}
}

func (v NullableAddressValidityItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressValidityItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


