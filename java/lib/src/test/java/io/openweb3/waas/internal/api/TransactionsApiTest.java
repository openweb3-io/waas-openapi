/*
 * WaaS OpenAPI Documentation
 * This is a custody wallet service openapi server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.waas.internal.api;

import io.openweb3.waas.internal.ApiException;
import io.openweb3.waas.models.CreateTransferRequest;
import io.openweb3.waas.models.CreateTransferResponse;
import io.openweb3.waas.models.Error;
import io.openweb3.waas.models.EstimateFeeRequest;
import io.openweb3.waas.models.EstimateFeeResponse;
import io.openweb3.waas.models.PageTransaction;
import io.openweb3.waas.models.Transaction;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Ignore
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    
    /**
     * Estimate fee
     *
     * Estimate fee for a transfer transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1TransactionsEstimateFeeTest() throws ApiException {
        EstimateFeeRequest estimateFeeRequest = null;
        EstimateFeeResponse response = api.v1TransactionsEstimateFee(estimateFeeRequest);

        // TODO: test validations
    }
    
    /**
     * List transactions
     *
     * List transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1TransactionsListTest() throws ApiException {
        List<String> assetIds = null;
        List<String> chainIds = null;
        String cursor = null;
        String hash = null;
        Integer limit = null;
        String status = null;
        List<String> tokenIds = null;
        List<String> walletIds = null;
        PageTransaction response = api.v1TransactionsList(assetIds, chainIds, cursor, hash, limit, status, tokenIds, walletIds);

        // TODO: test validations
    }
    
    /**
     * Get transaction
     *
     * Get a transaction by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1TransactionsRetrieveTest() throws ApiException {
        String transactionId = null;
        Transaction response = api.v1TransactionsRetrieve(transactionId);

        // TODO: test validations
    }
    
    /**
     * Transfer token
     *
     * Create a transfer transaction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1TransactionsTransferTest() throws ApiException {
        CreateTransferRequest createTransferRequest = null;
        CreateTransferResponse response = api.v1TransactionsTransfer(createTransferRequest);

        // TODO: test validations
    }
    
}
