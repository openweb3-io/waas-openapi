/*
 * WaaS OpenAPI Documentation
 * This is a WaaS OpenAPI Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.waas.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.openweb3.waas.internal.JSON;

/**
 * GasStation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class GasStation {
  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CHAIN_ID = "chain_id";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_GAS_CAPACITY = "gas_capacity";
  @SerializedName(SERIALIZED_NAME_GAS_CAPACITY)
  private String gasCapacity;

  public static final String SERIALIZED_NAME_GAS_THRESHOLD = "gas_threshold";
  @SerializedName(SERIALIZED_NAME_GAS_THRESHOLD)
  private String gasThreshold;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAX_FEE_LIMIT = "max_fee_limit";
  @SerializedName(SERIALIZED_NAME_MAX_FEE_LIMIT)
  private String maxFeeLimit;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public GasStation() {
  }

  public GasStation appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Application ID
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public GasStation chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

  /**
   * Chain ID
   * @return chainId
   */
  @javax.annotation.Nonnull
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public GasStation createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GasStation disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Disabled
   * @return disabled
   */
  @javax.annotation.Nonnull
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public GasStation gasCapacity(String gasCapacity) {
    this.gasCapacity = gasCapacity;
    return this;
  }

  /**
   * Gas Capacity
   * @return gasCapacity
   */
  @javax.annotation.Nonnull
  public String getGasCapacity() {
    return gasCapacity;
  }

  public void setGasCapacity(String gasCapacity) {
    this.gasCapacity = gasCapacity;
  }


  public GasStation gasThreshold(String gasThreshold) {
    this.gasThreshold = gasThreshold;
    return this;
  }

  /**
   * Gas Threshold
   * @return gasThreshold
   */
  @javax.annotation.Nonnull
  public String getGasThreshold() {
    return gasThreshold;
  }

  public void setGasThreshold(String gasThreshold) {
    this.gasThreshold = gasThreshold;
  }


  public GasStation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gas Station ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GasStation maxFeeLimit(String maxFeeLimit) {
    this.maxFeeLimit = maxFeeLimit;
    return this;
  }

  /**
   * Max Fee Limit
   * @return maxFeeLimit
   */
  @javax.annotation.Nonnull
  public String getMaxFeeLimit() {
    return maxFeeLimit;
  }

  public void setMaxFeeLimit(String maxFeeLimit) {
    this.maxFeeLimit = maxFeeLimit;
  }


  public GasStation orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * Organization ID
   * @return orgId
   */
  @javax.annotation.Nonnull
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public GasStation updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated time
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GasStation gasStation = (GasStation) o;
    return Objects.equals(this.appId, gasStation.appId) &&
        Objects.equals(this.chainId, gasStation.chainId) &&
        Objects.equals(this.createdAt, gasStation.createdAt) &&
        Objects.equals(this.disabled, gasStation.disabled) &&
        Objects.equals(this.gasCapacity, gasStation.gasCapacity) &&
        Objects.equals(this.gasThreshold, gasStation.gasThreshold) &&
        Objects.equals(this.id, gasStation.id) &&
        Objects.equals(this.maxFeeLimit, gasStation.maxFeeLimit) &&
        Objects.equals(this.orgId, gasStation.orgId) &&
        Objects.equals(this.updatedAt, gasStation.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, chainId, createdAt, disabled, gasCapacity, gasThreshold, id, maxFeeLimit, orgId, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GasStation {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    gasCapacity: ").append(toIndentedString(gasCapacity)).append("\n");
    sb.append("    gasThreshold: ").append(toIndentedString(gasThreshold)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxFeeLimit: ").append(toIndentedString(maxFeeLimit)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_id");
    openapiFields.add("chain_id");
    openapiFields.add("created_at");
    openapiFields.add("disabled");
    openapiFields.add("gas_capacity");
    openapiFields.add("gas_threshold");
    openapiFields.add("id");
    openapiFields.add("max_fee_limit");
    openapiFields.add("org_id");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("chain_id");
    openapiRequiredFields.add("disabled");
    openapiRequiredFields.add("gas_capacity");
    openapiRequiredFields.add("gas_threshold");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("max_fee_limit");
    openapiRequiredFields.add("org_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GasStation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GasStation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GasStation is not found in the empty JSON string", GasStation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GasStation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GasStation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GasStation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (!jsonObj.get("chain_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("gas_capacity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_capacity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_capacity").toString()));
      }
      if (!jsonObj.get("gas_threshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gas_threshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gas_threshold").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("max_fee_limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_fee_limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_fee_limit").toString()));
      }
      if (!jsonObj.get("org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_id").toString()));
      }
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GasStation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GasStation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GasStation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GasStation.class));

       return (TypeAdapter<T>) new TypeAdapter<GasStation>() {
           @Override
           public void write(JsonWriter out, GasStation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GasStation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GasStation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GasStation
   * @throws IOException if the JSON string is invalid with respect to GasStation
   */
  public static GasStation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GasStation.class);
  }

  /**
   * Convert an instance of GasStation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

