openapi: 3.1.0
info:
  description: This is a WaaS OpenAPI Server.
  title: WaaS OpenAPI Documentation
  version: "1.0"
externalDocs:
  description: ""
  url: ""
servers:
- url: /
paths:
  /api/v1/addresses:
    get:
      description: List of all available addresses.
      operationId: v1.addresses.list
      parameters:
      - description: Unique system generated identifier of the wallet
        explode: true
        in: query
        name: wallet_ids
        required: false
        schema:
          description: Unique system generated identifier of the wallet
          items:
            type: string
          type: array
          uniqueItems: false
          x-order: "1"
        style: form
      - description: The chain ids.
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: The chain ids.
          items:
            type: string
          type: array
          uniqueItems: false
          x-order: "2"
        style: form
      - description: The cursor to use for pagination.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          description: The cursor to use for pagination.
          type: string
          x-order: "3"
        style: form
      - description: "The number of records to return default: 20"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "The number of records to return default: 20"
          type: integer
          x-order: "4"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPage-Address'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List all addresses
      tags:
      - Addresses
      x-accepts:
      - application/json
  /api/v1/addresses/validate:
    get:
      description: Validate addresses
      operationId: v1.addresses.validate
      parameters:
      - description: Chain ID
        explode: true
        in: query
        name: chain_id
        required: true
        schema:
          description: Chain ID
          type: string
        style: form
      - description: Addresses
        explode: true
        in: query
        name: addresses
        required: true
        schema:
          description: Addresses
          items:
            type: string
          type: array
          uniqueItems: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateAddressesReply'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Validate addresses
      tags:
      - Addresses
      x-accepts:
      - application/json
  /api/v1/chains:
    get:
      description: List of all available chains.
      operationId: v1.chains.list
      parameters:
      - description: Cursor
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          description: Cursor
          type: string
          x-order: "1"
        style: form
      - description: "The number of records to return default: 20"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "The number of records to return default: 20"
          type: integer
          x-order: "2"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPage-Chain'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List all chains
      tags:
      - Chains
      x-accepts:
      - application/json
  /api/v1/chains/{chainId}:
    get:
      description: Retrieve chain information.
      operationId: v1.chains.retrieve
      parameters:
      - description: Chain ID
        explode: false
        in: path
        name: chainId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chain'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Retrieve chain
      tags:
      - Chains
      x-accepts:
      - application/json
  /api/v1/tokens:
    get:
      description: Retrieve a list of all tokens.
      operationId: v1.tokens.list
      parameters:
      - description: Cursor
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          description: Cursor
          type: string
          x-order: "1"
        style: form
      - description: "The number of records to return default: 20"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "The number of records to return default: 20"
          type: integer
          x-order: "2"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPage-Token'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List tokens
      tags:
      - Tokens
      x-accepts:
      - application/json
    post:
      description: Create a tokens.
      operationId: v1.tokens.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
        description: Request Body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Create token
      tags:
      - Tokens
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/tokens/{tokenId}:
    get:
      description: Get token info by ID
      operationId: v1.tokens.retrieve
      parameters:
      - description: Token ID
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Get Token
      tags:
      - Tokens
      x-accepts:
      - application/json
    patch:
      description: Update a tokens.
      operationId: v1.tokens.update
      parameters:
      - description: Token ID
        explode: false
        in: path
        name: tokenId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTokenRequest'
        description: Request Body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Update token
      tags:
      - Tokens
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/transactions:
    get:
      description: List transactions
      operationId: v1.transactions.list
      parameters:
      - description: Unique system generated identifier of the wallet
        explode: true
        in: query
        name: wallet_ids
        required: false
        schema:
          description: Unique system generated identifier of the wallet
          items:
            type: string
          type: array
          uniqueItems: false
          x-order: "1"
        style: form
      - description: The blockchain network on which the transaction takes place.
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: The blockchain network on which the transaction takes place.
          items:
            type: string
          type: array
          uniqueItems: false
          x-order: "2"
        style: form
      - description: The tokenId involved in the transaction.
        explode: true
        in: query
        name: token_ids
        required: false
        schema:
          description: The tokenId involved in the transaction.
          items:
            type: string
          type: array
          uniqueItems: false
          x-order: "3"
        style: form
      - description: The assetId involved in the transaction.
        explode: true
        in: query
        name: asset_ids
        required: false
        schema:
          description: The assetId involved in the transaction.
          items:
            type: string
          type: array
          uniqueItems: false
          x-order: "4"
        style: form
      - description: "The transaction hash, which uniquely identifies a transaction\
          \ on the blockchain."
        explode: true
        in: query
        name: hash
        required: false
        schema:
          description: "The transaction hash, which uniquely identifies a transaction\
            \ on the blockchain."
          type: string
          x-order: "5"
        style: form
      - description: The status of the transaction.
        explode: true
        in: query
        name: status
        required: false
        schema:
          description: The status of the transaction.
          type: string
          x-order: "6"
        style: form
      - description: A cursor value for pagination purposes.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          description: A cursor value for pagination purposes.
          type: string
          x-order: "7"
        style: form
      - description: "The number of records to return default: 20"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "The number of records to return default: 20"
          type: integer
          x-order: "8"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPage-Transaction'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List transactions
      tags:
      - Transactions
      x-accepts:
      - application/json
  /api/v1/transactions/estimate_fee:
    post:
      description: Estimate fee for a transfer transaction
      operationId: v1.transactions.estimate_fee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateFeeRequest'
        description: Request Body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateFeeResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Estimate fee
      tags:
      - Transactions
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/transactions/transfer:
    post:
      description: Create a transfer transaction
      operationId: v1.transactions.transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferRequest'
        description: Request Body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransferResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Transfer token
      tags:
      - Transactions
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/transactions/{transactionId}:
    get:
      description: Get a transaction by ID
      operationId: v1.transactions.retrieve
      parameters:
      - description: Transaction ID
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Get transaction
      tags:
      - Transactions
      x-accepts:
      - application/json
  /api/v1/wallets:
    get:
      description: List all wallets
      operationId: v1.wallets.list
      parameters:
      - description: Cursor
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          description: Cursor
          type: string
          x-order: "1"
        style: form
      - description: "The number of records to return default: 20"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "The number of records to return default: 20"
          type: integer
          x-order: "2"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPage-Wallet'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List wallets
      tags:
      - Wallets
      x-accepts:
      - application/json
    post:
      description: Create a Wallet
      operationId: v1.wallets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequest'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Create wallet
      tags:
      - Wallets
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/wallets/{walletId}:
    delete:
      description: Delete a Wallet
      operationId: v1.wallets.delete
      parameters:
      - description: Wallet id or uid
        explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Delete wallet
      tags:
      - Wallets
      x-accepts:
      - application/json
    get:
      description: Get a wallet by ID
      operationId: v1.wallets.retrieve
      parameters:
      - description: Wallet id or uid
        explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Get wallet
      tags:
      - Wallets
      x-accepts:
      - application/json
    patch:
      description: Update a Wallet
      operationId: v1.wallets.update
      parameters:
      - description: Wallet id or uid
        explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWalletRequest'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Update wallet
      tags:
      - Wallets
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/wallets/{walletId}/addresses:
    get:
      description: List addresses in wallet
      operationId: v1.wallets.listAddresses
      parameters:
      - description: Wallet id or uid
        explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      - description: chain ids
        explode: true
        in: query
        name: chain_ids
        required: false
        schema:
          description: chain ids
          items:
            type: string
          type: array
          uniqueItems: false
          x-order: "1"
        style: form
      - description: Cursor
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          description: Cursor
          type: string
          x-order: "2"
        style: form
      - description: "Limit, default is 20"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "Limit, default is 20"
          type: integer
          x-order: "3"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorPage-Address'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List wallet addresses
      tags:
      - Addresses
      x-accepts:
      - application/json
    post:
      description: Create address for wallet
      operationId: v1.wallets.createAddress
      parameters:
      - description: Wallet id or uid
        explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressRequest'
        description: Request Body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Create address
      tags:
      - Addresses
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/wallets/{walletId}/addresses/{address}:
    get:
      description: Get specific address information in wallet
      operationId: v1.wallets.getAddress
      parameters:
      - description: Wallet id or uid
        explode: false
        in: path
        name: walletId
        required: true
        schema:
          type: string
        style: simple
      - description: Address
        explode: false
        in: path
        name: address
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Get address information
      tags:
      - Addresses
      x-accepts:
      - application/json
  /api/v1/webhooks/endpoints:
    get:
      description: List webhook endpoints
      operationId: v1.webhooks.endpoint.list
      parameters:
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
          x-order: "1"
        style: form
      - description: "The number of records to return default: 20"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "The number of records to return default: 20"
          type: integer
          x-order: "2"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorIterator-Endpoint'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List webhook endpoints
      tags:
      - Webhook endpoints
      x-accepts:
      - application/json
    post:
      description: Create a webhook endpoint
      operationId: v1.webhooks.endpoint.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEndpoint'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Create webhook endpoint
      tags:
      - Webhook endpoints
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/webhooks/endpoints/{endpointId}:
    delete:
      description: Delete specific webhook endpoint
      operationId: v1.webhooks.endpoint.delete
      parameters:
      - description: Endpoint ID
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Delete webhook endpoint
      tags:
      - Webhook endpoints
      x-accepts:
      - application/json
    get:
      description: Get specific webhook endpoint
      operationId: v1.webhooks.endpoint.retrieve
      parameters:
      - description: Endpoint ID
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Get webhook endpoint
      tags:
      - Webhook endpoints
      x-accepts:
      - application/json
    patch:
      description: Update specific webhook endpoint
      operationId: v1.webhooks.endpoint.update
      parameters:
      - description: Endpoint ID
        explode: false
        in: path
        name: endpointId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEndpoint'
        description: Request body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Endpoint'
          description: OK
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: Update webhook endpoint
      tags:
      - Webhook endpoints
      x-content-type: application/json
      x-accepts:
      - application/json
  /api/v1/webhooks/events:
    get:
      description: List webhook event types
      operationId: v1.webhooks.events.list
      parameters:
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          type: string
          x-order: "1"
        style: form
      - description: "The number of records to return default: 100"
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: "The number of records to return default: 100"
          type: integer
          x-order: "2"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CursorIterator-EventType'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      - SignatureAuth: []
      summary: List webhook event types
      tags:
      - Webhook events
      x-accepts:
      - application/json
components:
  schemas:
    Address:
      example:
        path: path
        chain: chain
        wallet_id: wallet_id
        address: address
        chain_id: chain_id
        updated_at: updated_at
        created_at: created_at
        memo: memo
        type: type
      properties:
        address:
          description: Blockchain address
          type: string
        chain:
          description: Chain name
          type: string
        chain_id:
          description: Chain ID
          type: string
        created_at:
          description: Created time
          type: string
        memo:
          description: The memo
          type: string
        path:
          description: Derivation path
          type: string
        type:
          description: Address Type
          type: string
        updated_at:
          description: Updated time
          type: string
        wallet_id:
          description: Chain ID
          type: string
      required:
      - address
    AddressValidityItem:
      example:
        address: address
        validity: true
      properties:
        address:
          description: Address
          type: string
        validity:
          description: Validity
          type: boolean
    Chain:
      example:
        icon_url: icon_url
        symbol: symbol
        updated_at: updated_at
        need_memo: true
        name: name
        created_at: created_at
        explorer_block_url: explorer_block_url
        confirm_num: 0
        id: id
        explorer_tx_url: explorer_tx_url
        explorer_address_url: explorer_address_url
      properties:
        confirm_num:
          description: Confirmation number
          type: integer
        created_at:
          description: Created time
          type: string
        explorer_address_url:
          description: Explorer address URL
          type: string
        explorer_block_url:
          description: Explorer block URL
          type: string
        explorer_tx_url:
          description: Explorer transaction URL
          type: string
        icon_url:
          description: Icon URL
          type: string
        id:
          description: Chain ID
          type: string
        name:
          description: Chain name
          type: string
        need_memo:
          description: Need memo
          type: boolean
        symbol:
          description: Chain symbol
          type: string
        updated_at:
          description: Updated time
          type: string
    CreateAddressRequest:
      example:
        chain_id: chain_id
        type: DEPOSIT
      properties:
        chain_id:
          description: Chain ID
          type: string
        type:
          description: Address Type
          enum:
          - DEPOSIT
          - HOT
          type: string
      required:
      - chain_id
      - type
    CreateEndpoint:
      example:
        uid: uid
        description: description
        disabled: true
        eventTypes:
        - eventTypes
        - eventTypes
        url: url
      properties:
        description:
          description: The description of the endpoint
          type: string
        disabled:
          description: The disabled of the endpoint
          type: boolean
        eventTypes:
          description: The event types of the endpoint
          items:
            type: string
          type: array
          uniqueItems: false
        uid:
          description: The uid of the endpoint
          type: string
        url:
          description: The url of the endpoint
          type: string
      required:
      - eventTypes
      - url
    CreateTokenRequest:
      example:
        uid: uid
        name: name
      properties:
        name:
          description: Token name
          type: string
        uid:
          description: Unique ID
          type: string
    CreateTransferRequest:
      example:
        uid: uid
        amount: amount
        token_id: token_id
        extra: extra
        fee:
          maxFeeAmount: maxFeeAmount
          tokenId: tokenId
          type: 6
        destination:
          address: address
        memo: memo
        source:
          wallet_id: wallet_id
          address: address
      properties:
        amount:
          description: The amount to be transferred
          type: string
        destination:
          $ref: '#/components/schemas/CreateTransferRequest_destination'
        extra:
          description: Extra
          type: string
        fee:
          $ref: '#/components/schemas/Fee'
        memo:
          description: Memo
          type: string
        source:
          $ref: '#/components/schemas/CreateTransferRequest_source'
        token_id:
          description: The tokenId to be transferred
          type: string
        uid:
          description: The custom unique transaction identifier
          type: string
      required:
      - amount
      - destination
      - source
      - token_id
    CreateTransferResponse:
      example:
        transaction_id: transaction_id
        status: status
      properties:
        status:
          description: Transaction status
          type: string
        transaction_id:
          description: Transaction ID
          type: string
      required:
      - status
      - transaction_id
    CreateWalletRequest:
      example:
        uid: uid
        name: name
      properties:
        name:
          description: Wallet name
          type: string
        uid:
          description: Custom ID
          type: string
      required:
      - name
    CursorIterator-Endpoint:
      example:
        prev_cursor: prev_cursor
        next_cursor: next_cursor
        has_next: true
        has_prev: true
        done: true
        items:
        - filter: filter
          createdAt: createdAt
          uid: uid
          description: description
          disabled: true
          id: id
          eventTypes:
          - eventTypes
          - eventTypes
          url: url
        - filter: filter
          createdAt: createdAt
          uid: uid
          description: description
          disabled: true
          id: id
          eventTypes:
          - eventTypes
          - eventTypes
          url: url
      properties:
        done:
          type: boolean
        has_next:
          type: boolean
        has_prev:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Endpoint'
          type: array
          uniqueItems: false
        next_cursor:
          type: string
        prev_cursor:
          type: string
      required:
      - done
      - has_next
      - has_prev
      - items
    CursorIterator-EventType:
      example:
        prev_cursor: prev_cursor
        next_cursor: next_cursor
        has_next: true
        has_prev: true
        done: true
        items:
        - name: name
          description: description
        - name: name
          description: description
      properties:
        done:
          type: boolean
        has_next:
          type: boolean
        has_prev:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/EventType'
          type: array
          uniqueItems: false
        next_cursor:
          type: string
        prev_cursor:
          type: string
      required:
      - done
      - has_next
      - has_prev
      - items
    CursorPage-Address:
      example:
        prev_cursor: prev_cursor
        next_cursor: next_cursor
        total: 0
        has_next: true
        has_prev: true
        items:
        - path: path
          chain: chain
          wallet_id: wallet_id
          address: address
          chain_id: chain_id
          updated_at: updated_at
          created_at: created_at
          memo: memo
          type: type
        - path: path
          chain: chain
          wallet_id: wallet_id
          address: address
          chain_id: chain_id
          updated_at: updated_at
          created_at: created_at
          memo: memo
          type: type
      properties:
        has_next:
          type: boolean
        has_prev:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Address'
          type: array
          uniqueItems: false
        next_cursor:
          type: string
        prev_cursor:
          type: string
        total:
          type: integer
      required:
      - has_next
      - has_prev
      - items
      - total
    CursorPage-Chain:
      example:
        prev_cursor: prev_cursor
        next_cursor: next_cursor
        total: 6
        has_next: true
        has_prev: true
        items:
        - icon_url: icon_url
          symbol: symbol
          updated_at: updated_at
          need_memo: true
          name: name
          created_at: created_at
          explorer_block_url: explorer_block_url
          confirm_num: 0
          id: id
          explorer_tx_url: explorer_tx_url
          explorer_address_url: explorer_address_url
        - icon_url: icon_url
          symbol: symbol
          updated_at: updated_at
          need_memo: true
          name: name
          created_at: created_at
          explorer_block_url: explorer_block_url
          confirm_num: 0
          id: id
          explorer_tx_url: explorer_tx_url
          explorer_address_url: explorer_address_url
      properties:
        has_next:
          type: boolean
        has_prev:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Chain'
          type: array
          uniqueItems: false
        next_cursor:
          type: string
        prev_cursor:
          type: string
        total:
          type: integer
      required:
      - has_next
      - has_prev
      - items
      - total
    CursorPage-Token:
      example:
        prev_cursor: prev_cursor
        next_cursor: next_cursor
        total: 1
        has_next: true
        has_prev: true
        items:
        - icon_url: icon_url
          symbol: symbol
          metadata:
            key: metadata
          need_memo: true
          total_supply: total_supply
          precision: 6
          created_at: created_at
          can_deposit: true
          contract_address: contract_address
          min_withdraw_amount: min_withdraw_amount
          max_withdraw_amount: max_withdraw_amount
          updated_at: updated_at
          decimals: 0
          name: name
          can_withdraw: true
          id: id
          min_deposit_amount: min_deposit_amount
        - icon_url: icon_url
          symbol: symbol
          metadata:
            key: metadata
          need_memo: true
          total_supply: total_supply
          precision: 6
          created_at: created_at
          can_deposit: true
          contract_address: contract_address
          min_withdraw_amount: min_withdraw_amount
          max_withdraw_amount: max_withdraw_amount
          updated_at: updated_at
          decimals: 0
          name: name
          can_withdraw: true
          id: id
          min_deposit_amount: min_deposit_amount
      properties:
        has_next:
          type: boolean
        has_prev:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Token'
          type: array
          uniqueItems: false
        next_cursor:
          type: string
        prev_cursor:
          type: string
        total:
          type: integer
      required:
      - has_next
      - has_prev
      - items
      - total
    CursorPage-Transaction:
      example:
        prev_cursor: prev_cursor
        next_cursor: next_cursor
        total: 1
        has_next: true
        has_prev: true
        items:
        - walletId: walletId
          chain: chain
          tokenId: tokenId
          signature: signature
          fee:
            maxFeeAmount: maxFeeAmount
            tokenId: tokenId
            type: 6
          confirmedNum: 0
          destination:
            amount: amount
            address: address
            memo: memo
            type: type
          description: description
          source:
            amount: amount
            address: address
            memo: memo
            type: type
          type: type
          createdAt: createdAt
          uid: uid
          chainId: chainId
          assetId: assetId
          extra:
            key: ""
          id: id
          hash: hash
          failedReason: failedReason
          status: status
          updatedAt: updatedAt
        - walletId: walletId
          chain: chain
          tokenId: tokenId
          signature: signature
          fee:
            maxFeeAmount: maxFeeAmount
            tokenId: tokenId
            type: 6
          confirmedNum: 0
          destination:
            amount: amount
            address: address
            memo: memo
            type: type
          description: description
          source:
            amount: amount
            address: address
            memo: memo
            type: type
          type: type
          createdAt: createdAt
          uid: uid
          chainId: chainId
          assetId: assetId
          extra:
            key: ""
          id: id
          hash: hash
          failedReason: failedReason
          status: status
          updatedAt: updatedAt
      properties:
        has_next:
          type: boolean
        has_prev:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
          uniqueItems: false
        next_cursor:
          type: string
        prev_cursor:
          type: string
        total:
          type: integer
      required:
      - has_next
      - has_prev
      - items
      - total
    CursorPage-Wallet:
      example:
        prev_cursor: prev_cursor
        next_cursor: next_cursor
        total: 0
        has_next: true
        has_prev: true
        items:
        - uid: uid
          name: name
          created_at: created_at
          id: id
          updatedAt: updatedAt
        - uid: uid
          name: name
          created_at: created_at
          id: id
          updatedAt: updatedAt
      properties:
        has_next:
          type: boolean
        has_prev:
          type: boolean
        items:
          items:
            $ref: '#/components/schemas/Wallet'
          type: array
          uniqueItems: false
        next_cursor:
          type: string
        prev_cursor:
          type: string
        total:
          type: integer
      required:
      - has_next
      - has_prev
      - items
      - total
    Endpoint:
      example:
        filter: filter
        createdAt: createdAt
        uid: uid
        description: description
        disabled: true
        id: id
        eventTypes:
        - eventTypes
        - eventTypes
        url: url
      properties:
        createdAt:
          type: string
        description:
          type: string
        disabled:
          type: boolean
        eventTypes:
          items:
            type: string
          type: array
          uniqueItems: false
        filter:
          type: string
        id:
          type: string
        uid:
          type: string
        url:
          type: string
      required:
      - createdAt
      - description
      - disabled
      - eventTypes
      - filter
      - id
      - url
    Error:
      example:
        msg: msg
        code: 6
      properties:
        code:
          description: error code
          type: integer
        msg:
          description: error message
          type: string
      required:
      - code
      - msg
    EstimateFeeRequest:
      example:
        amount: amount
        token_id: token_id
        extra: extra
        destination:
          address: address
        memo: memo
        source:
          wallet_id: wallet_id
          address: address
      properties:
        amount:
          description: Amount
          type: string
        destination:
          $ref: '#/components/schemas/CreateTransferRequest_destination'
        extra:
          description: Extra
          type: string
        memo:
          description: Memo
          type: string
        source:
          $ref: '#/components/schemas/CreateTransferRequest_source'
        token_id:
          description: Token ID
          type: string
      required:
      - amount
      - destination
      - source
      - token_id
    EstimateFeeResponse:
      example:
        amount: amount
        token_id: token_id
      properties:
        amount:
          description: Amount
          type: string
        token_id:
          description: Token ID
          type: string
      required:
      - amount
      - token_id
    EventType:
      example:
        name: name
        description: description
      properties:
        description:
          type: string
        name:
          type: string
    Fee:
      description: Fee
      example:
        maxFeeAmount: maxFeeAmount
        tokenId: tokenId
        type: 6
      properties:
        maxFeeAmount:
          description: Max fee amount
          type: string
        tokenId:
          description: Token ID
          type: string
        type:
          description: Fee type
          type: integer
          x-enum-varnames:
          - Fixed
      required:
      - maxFeeAmount
      - tokenId
      - type
    FeeType:
      description: Fee type
      type: integer
      x-enum-varnames:
      - Fixed
    Token:
      example:
        icon_url: icon_url
        symbol: symbol
        metadata:
          key: metadata
        need_memo: true
        total_supply: total_supply
        precision: 6
        created_at: created_at
        can_deposit: true
        contract_address: contract_address
        min_withdraw_amount: min_withdraw_amount
        max_withdraw_amount: max_withdraw_amount
        updated_at: updated_at
        decimals: 0
        name: name
        can_withdraw: true
        id: id
        min_deposit_amount: min_deposit_amount
      properties:
        can_deposit:
          description: Whether deposits are allowed
          type: boolean
        can_withdraw:
          description: Whether withdrawals are allowed
          type: boolean
        contract_address:
          description: Contract address
          type: string
        created_at:
          description: Creation time
          type: string
        decimals:
          description: Decimals
          type: integer
        icon_url:
          description: Icon
          type: string
        id:
          description: Token ID
          type: string
        max_withdraw_amount:
          description: Max withdraw amount
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Extended metadata
        min_deposit_amount:
          description: Min deposit amount
          type: string
        min_withdraw_amount:
          description: Min withdraw amount
          type: string
        name:
          description: Name
          type: string
        need_memo:
          description: Whether a memo is required
          type: boolean
        precision:
          description: Precision
          type: integer
        symbol:
          description: "Symbol . e.g.: BTC / ETH"
          type: string
        total_supply:
          description: Total supply
          type: string
        updated_at:
          description: Last updated time
          type: string
    Transaction:
      example:
        walletId: walletId
        chain: chain
        tokenId: tokenId
        signature: signature
        fee:
          maxFeeAmount: maxFeeAmount
          tokenId: tokenId
          type: 6
        confirmedNum: 0
        destination:
          amount: amount
          address: address
          memo: memo
          type: type
        description: description
        source:
          amount: amount
          address: address
          memo: memo
          type: type
        type: type
        createdAt: createdAt
        uid: uid
        chainId: chainId
        assetId: assetId
        extra:
          key: ""
        id: id
        hash: hash
        failedReason: failedReason
        status: status
        updatedAt: updatedAt
      properties:
        assetId:
          description: Asset ID
          type: string
        chain:
          description: Chain
          type: string
        chainId:
          description: Chain ID
          type: string
        confirmedNum:
          description: Confirmed number
          type: integer
        createdAt:
          description: Created time
          type: string
        description:
          description: Description
          type: string
        destination:
          $ref: '#/components/schemas/TransactionEndpoint'
        extra:
          additionalProperties: {}
          description: Extra
        failedReason:
          description: Failed reason
          type: string
        fee:
          $ref: '#/components/schemas/Fee'
        hash:
          description: Transaction hash
          type: string
        id:
          description: Transaction ID
          type: string
        signature:
          description: Signature
          type: string
        source:
          $ref: '#/components/schemas/TransactionEndpoint'
        status:
          description: Transaction status
          type: string
        tokenId:
          description: Token ID
          type: string
        type:
          description: Transaction type
          type: string
          x-enum-varnames:
          - TransactionType_Unknown
          - TransactionType_Deposit
          - TransactionType_Withdraw
        uid:
          description: The custom unique transaction identifier
          type: string
        updatedAt:
          description: Updated time
          type: string
        walletId:
          description: Wallet ID
          type: string
    TransactionEndpoint:
      description: Source
      example:
        amount: amount
        address: address
        memo: memo
        type: type
      properties:
        address:
          description: Address
          type: string
        amount:
          description: Amount
          type: string
        memo:
          description: The memo
          type: string
        type:
          description: Transaction endpoint type
          type: string
    TransactionType:
      description: Transaction type
      type: string
      x-enum-varnames:
      - TransactionType_Unknown
      - TransactionType_Deposit
      - TransactionType_Withdraw
    TransferDestinationAddress:
      example:
        address: address
      properties:
        address:
          description: Address
          type: string
      required:
      - address
    TransferSourceAddress:
      example:
        wallet_id: wallet_id
        address: address
      properties:
        address:
          description: Address
          type: string
        wallet_id:
          description: Wallet ID
          type: string
      required:
      - address
      - wallet_id
    UpdateEndpoint:
      example:
        uid: uid
        description: description
        disabled: true
        eventTypes:
        - eventTypes
        - eventTypes
        url: url
      properties:
        description:
          type: string
        disabled:
          type: boolean
        eventTypes:
          items:
            type: string
          type: array
          uniqueItems: false
        uid:
          type: string
        url:
          type: string
    UpdateTokenRequest:
      example:
        uid: uid
        name: name
        id: id
      properties:
        id:
          description: Token ID
          type: string
        name:
          description: Token name
          type: string
        uid:
          description: Unique ID
          type: string
    UpdateWalletRequest:
      example:
        uid: uid
        name: name
      properties:
        name:
          description: Wallet Name
          type: string
        uid:
          description: Custom ID
          type: string
    ValidateAddressesReply:
      example:
        items:
        - address: address
          validity: true
        - address: address
          validity: true
      properties:
        items:
          description: Address validity items
          items:
            $ref: '#/components/schemas/AddressValidityItem'
          type: array
          uniqueItems: false
    Wallet:
      example:
        uid: uid
        name: name
        created_at: created_at
        id: id
        updatedAt: updatedAt
      properties:
        created_at:
          description: Created time
          type: string
        id:
          description: Wallet ID
          type: string
        name:
          description: Wallet name
          type: string
        uid:
          description: External unique ID
          type: string
        updatedAt:
          description: Updated time
          type: string
      required:
      - id
      - name
      - uid
    CreateTransferRequest_destination:
      description: The ID of the wallet to which the transfer will be made
      oneOf:
      - $ref: '#/components/schemas/TransferDestinationAddress'
    CreateTransferRequest_source:
      description: The ID of the wallet from which the transfer will be made
      oneOf:
      - $ref: '#/components/schemas/TransferSourceAddress'
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-Signature
      type: apiKey

