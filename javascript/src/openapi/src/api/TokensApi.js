/**
 * WaaS OpenAPI Documentation
 * This is a custody wallet service openapi server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTokenRequest from '../model/CreateTokenRequest';
import Error from '../model/Error';
import Token from '../model/Token';

/**
* Tokens service.
* @module api/TokensApi
* @version 1.0
*/
export default class TokensApi {

    /**
    * Constructs a new TokensApi. 
    * @alias module:api/TokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1TokensCreate operation.
     * @callback module:api/TokensApi~v1TokensCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create token
     * Create a tokens.
     * @param {module:model/CreateTokenRequest} createTokenRequest Request Body
     * @param {module:api/TokensApi~v1TokensCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    v1TokensCreate(createTokenRequest, callback) {
      let postBody = createTokenRequest;
      // verify the required parameter 'createTokenRequest' is set
      if (createTokenRequest === undefined || createTokenRequest === null) {
        throw new Error("Missing the required parameter 'createTokenRequest' when calling v1TokensCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/api/v1/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TokensRetrieve operation.
     * @callback module:api/TokensApi~v1TokensRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Token
     * Get token info by ID
     * @param {String} id Token ID
     * @param {module:api/TokensApi~v1TokensRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    v1TokensRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v1TokensRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/api/v1/tokens/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
