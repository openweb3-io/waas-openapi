/**
 * WaaS OpenAPI Documentation
 * This is a WaaS OpenAPI Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTransferRequest from '../model/CreateTransferRequest';
import CreateTransferResponse from '../model/CreateTransferResponse';
import CursorPageTransaction from '../model/CursorPageTransaction';
import Error from '../model/Error';
import EstimateFeeRequest from '../model/EstimateFeeRequest';
import EstimateFeeResponse from '../model/EstimateFeeResponse';
import Transaction from '../model/Transaction';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1TransactionsEstimateFee operation.
     * @callback module:api/TransactionsApi~v1TransactionsEstimateFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EstimateFeeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Estimate fee
     * Estimate fee for a transfer transaction
     * @param {module:model/EstimateFeeRequest} estimateFeeRequest Request Body
     * @param {module:api/TransactionsApi~v1TransactionsEstimateFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EstimateFeeResponse}
     */
    v1TransactionsEstimateFee(estimateFeeRequest, callback) {
      let postBody = estimateFeeRequest;
      // verify the required parameter 'estimateFeeRequest' is set
      if (estimateFeeRequest === undefined || estimateFeeRequest === null) {
        throw new Error("Missing the required parameter 'estimateFeeRequest' when calling v1TransactionsEstimateFee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EstimateFeeResponse;
      return this.apiClient.callApi(
        '/api/v1/transactions/estimate_fee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TransactionsList operation.
     * @callback module:api/TransactionsApi~v1TransactionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CursorPageTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions
     * List transactions
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [walletIds] Unique system generated identifier of the wallet
     * @param {Array.<String>} [chainIds] The blockchain network on which the transaction takes place.
     * @param {Array.<String>} [tokenIds] The tokenId involved in the transaction.
     * @param {Array.<String>} [assetIds] The assetId involved in the transaction.
     * @param {String} [hash] The transaction hash, which uniquely identifies a transaction on the blockchain.
     * @param {String} [status] The status of the transaction.
     * @param {String} [cursor] A cursor value for pagination purposes.
     * @param {Number} [limit] The number of records to return default: 20
     * @param {module:api/TransactionsApi~v1TransactionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CursorPageTransaction}
     */
    v1TransactionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_ids': this.apiClient.buildCollectionParam(opts['walletIds'], 'multi'),
        'chain_ids': this.apiClient.buildCollectionParam(opts['chainIds'], 'multi'),
        'token_ids': this.apiClient.buildCollectionParam(opts['tokenIds'], 'multi'),
        'asset_ids': this.apiClient.buildCollectionParam(opts['assetIds'], 'multi'),
        'hash': opts['hash'],
        'status': opts['status'],
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CursorPageTransaction;
      return this.apiClient.callApi(
        '/api/v1/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TransactionsRetrieve operation.
     * @callback module:api/TransactionsApi~v1TransactionsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction
     * Get a transaction by ID
     * @param {String} transactionId Transaction ID
     * @param {module:api/TransactionsApi~v1TransactionsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    v1TransactionsRetrieve(transactionId, callback) {
      let postBody = null;
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling v1TransactionsRetrieve");
      }

      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transaction;
      return this.apiClient.callApi(
        '/api/v1/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1TransactionsTransfer operation.
     * @callback module:api/TransactionsApi~v1TransactionsTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer token
     * Create a transfer transaction
     * @param {module:model/CreateTransferRequest} createTransferRequest Request Body
     * @param {module:api/TransactionsApi~v1TransactionsTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTransferResponse}
     */
    v1TransactionsTransfer(createTransferRequest, callback) {
      let postBody = createTransferRequest;
      // verify the required parameter 'createTransferRequest' is set
      if (createTransferRequest === undefined || createTransferRequest === null) {
        throw new Error("Missing the required parameter 'createTransferRequest' when calling v1TransactionsTransfer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransferResponse;
      return this.apiClient.callApi(
        '/api/v1/transactions/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
