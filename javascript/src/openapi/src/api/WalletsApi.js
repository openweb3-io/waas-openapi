/**
 * WaaS OpenAPI Documentation
 * This is a WaaS OpenAPI Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateWalletRequest from '../model/CreateWalletRequest';
import CursorPageWallet from '../model/CursorPageWallet';
import Error from '../model/Error';
import UpdateWalletRequest from '../model/UpdateWalletRequest';
import Wallet from '../model/Wallet';

/**
* Wallets service.
* @module api/WalletsApi
* @version 1.0
*/
export default class WalletsApi {

    /**
    * Constructs a new WalletsApi. 
    * @alias module:api/WalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1WalletsCreate operation.
     * @callback module:api/WalletsApi~v1WalletsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wallet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create wallet
     * Create a Wallet
     * @param {module:model/CreateWalletRequest} createWalletRequest Request body
     * @param {module:api/WalletsApi~v1WalletsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wallet}
     */
    v1WalletsCreate(createWalletRequest, callback) {
      let postBody = createWalletRequest;
      // verify the required parameter 'createWalletRequest' is set
      if (createWalletRequest === undefined || createWalletRequest === null) {
        throw new Error("Missing the required parameter 'createWalletRequest' when calling v1WalletsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wallet;
      return this.apiClient.callApi(
        '/api/v1/wallets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WalletsDelete operation.
     * @callback module:api/WalletsApi~v1WalletsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wallet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete wallet
     * Delete a Wallet
     * @param {String} walletId Wallet ID
     * @param {module:api/WalletsApi~v1WalletsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wallet}
     */
    v1WalletsDelete(walletId, callback) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling v1WalletsDelete");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Wallet;
      return this.apiClient.callApi(
        '/api/v1/wallets/{walletId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WalletsList operation.
     * @callback module:api/WalletsApi~v1WalletsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CursorPageWallet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List wallets
     * List all wallets
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor
     * @param {Number} opts.limit The number of records to return default: 20
     * @param {module:api/WalletsApi~v1WalletsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CursorPageWallet}
     */
    v1WalletsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CursorPageWallet;
      return this.apiClient.callApi(
        '/api/v1/wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WalletsRetrieve operation.
     * @callback module:api/WalletsApi~v1WalletsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wallet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet
     * Get a wallet by ID
     * @param {String} walletId Wallet ID
     * @param {module:api/WalletsApi~v1WalletsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wallet}
     */
    v1WalletsRetrieve(walletId, callback) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling v1WalletsRetrieve");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Wallet;
      return this.apiClient.callApi(
        '/api/v1/wallets/{walletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WalletsUpdate operation.
     * @callback module:api/WalletsApi~v1WalletsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wallet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update wallet
     * Update a Wallet
     * @param {String} walletId Wallet ID
     * @param {module:model/UpdateWalletRequest} updateWalletRequest Request body
     * @param {module:api/WalletsApi~v1WalletsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wallet}
     */
    v1WalletsUpdate(walletId, updateWalletRequest, callback) {
      let postBody = updateWalletRequest;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling v1WalletsUpdate");
      }
      // verify the required parameter 'updateWalletRequest' is set
      if (updateWalletRequest === undefined || updateWalletRequest === null) {
        throw new Error("Missing the required parameter 'updateWalletRequest' when calling v1WalletsUpdate");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wallet;
      return this.apiClient.callApi(
        '/api/v1/wallets/{walletId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
