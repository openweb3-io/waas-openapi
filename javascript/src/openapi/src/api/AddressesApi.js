/**
 * WaaS OpenAPI Documentation
 * This is a WaaS OpenAPI Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Address from '../model/Address';
import CreateAddressRequest from '../model/CreateAddressRequest';
import CursorPageAddress from '../model/CursorPageAddress';
import Error from '../model/Error';

/**
* Addresses service.
* @module api/AddressesApi
* @version 1.0
*/
export default class AddressesApi {

    /**
    * Constructs a new AddressesApi. 
    * @alias module:api/AddressesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1AddressesList operation.
     * @callback module:api/AddressesApi~v1AddressesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CursorPageAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all addresses
     * List of all available addresses.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [walletIds] Unique system generated identifier of the wallet
     * @param {Array.<String>} [chainIds] The chain ids.
     * @param {String} [cursor] The cursor to use for pagination.
     * @param {Number} [limit] The number of records to return default: 20
     * @param {module:api/AddressesApi~v1AddressesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CursorPageAddress}
     */
    v1AddressesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'wallet_ids': this.apiClient.buildCollectionParam(opts['walletIds'], 'multi'),
        'chain_ids': this.apiClient.buildCollectionParam(opts['chainIds'], 'multi'),
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CursorPageAddress;
      return this.apiClient.callApi(
        '/api/v1/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WalletsCreateAddress operation.
     * @callback module:api/AddressesApi~v1WalletsCreateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Address} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create address
     * Create address for wallet
     * @param {String} walletId Wallet id or uid
     * @param {module:model/CreateAddressRequest} createAddressRequest Request Body
     * @param {module:api/AddressesApi~v1WalletsCreateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Address}
     */
    v1WalletsCreateAddress(walletId, createAddressRequest, callback) {
      let postBody = createAddressRequest;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling v1WalletsCreateAddress");
      }
      // verify the required parameter 'createAddressRequest' is set
      if (createAddressRequest === undefined || createAddressRequest === null) {
        throw new Error("Missing the required parameter 'createAddressRequest' when calling v1WalletsCreateAddress");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Address;
      return this.apiClient.callApi(
        '/api/v1/wallets/{walletId}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WalletsGetAddress operation.
     * @callback module:api/AddressesApi~v1WalletsGetAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Address} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address information
     * Get specific address information in wallet
     * @param {String} walletId Wallet id or uid
     * @param {String} address Address
     * @param {module:api/AddressesApi~v1WalletsGetAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Address}
     */
    v1WalletsGetAddress(walletId, address, callback) {
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling v1WalletsGetAddress");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling v1WalletsGetAddress");
      }

      let pathParams = {
        'walletId': walletId,
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Address;
      return this.apiClient.callApi(
        '/api/v1/wallets/{walletId}/addresses/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WalletsListAddresses operation.
     * @callback module:api/AddressesApi~v1WalletsListAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CursorPageAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List wallet addresses
     * List addresses in wallet
     * @param {String} walletId Wallet id or uid
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [chainIds] chain ids
     * @param {String} [cursor] Cursor
     * @param {Number} [limit] Limit, default is 20
     * @param {module:api/AddressesApi~v1WalletsListAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CursorPageAddress}
     */
    v1WalletsListAddresses(walletId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'walletId' is set
      if (walletId === undefined || walletId === null) {
        throw new Error("Missing the required parameter 'walletId' when calling v1WalletsListAddresses");
      }

      let pathParams = {
        'walletId': walletId
      };
      let queryParams = {
        'chain_ids': this.apiClient.buildCollectionParam(opts['chainIds'], 'multi'),
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CursorPageAddress;
      return this.apiClient.callApi(
        '/api/v1/wallets/{walletId}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
