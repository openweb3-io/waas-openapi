/**
 * WaaS OpenAPI Documentation
 * This is a WaaS OpenAPI Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateEndpoint from '../model/CreateEndpoint';
import CursorPageEndpoint from '../model/CursorPageEndpoint';
import Endpoint from '../model/Endpoint';
import Error from '../model/Error';
import UpdateEndpoint from '../model/UpdateEndpoint';

/**
* WebhookEndpoints service.
* @module api/WebhookEndpointsApi
* @version 1.0
*/
export default class WebhookEndpointsApi {

    /**
    * Constructs a new WebhookEndpointsApi. 
    * @alias module:api/WebhookEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1WebhooksCreate operation.
     * @callback module:api/WebhookEndpointsApi~v1WebhooksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create webhook endpoint
     * Create a webhook endpoint
     * @param {module:model/CreateEndpoint} createEndpoint Request body
     * @param {module:api/WebhookEndpointsApi~v1WebhooksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    v1WebhooksCreate(createEndpoint, callback) {
      let postBody = createEndpoint;
      // verify the required parameter 'createEndpoint' is set
      if (createEndpoint === undefined || createEndpoint === null) {
        throw new Error("Missing the required parameter 'createEndpoint' when calling v1WebhooksCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Endpoint;
      return this.apiClient.callApi(
        '/api/v1/webhooks/endpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhooksDelete operation.
     * @callback module:api/WebhookEndpointsApi~v1WebhooksDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete webhook endpoint
     * Delete specific webhook endpoint
     * @param {String} endpointId Endpoint ID
     * @param {module:api/WebhookEndpointsApi~v1WebhooksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    v1WebhooksDelete(endpointId, callback) {
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling v1WebhooksDelete");
      }

      let pathParams = {
        'endpointId': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Endpoint;
      return this.apiClient.callApi(
        '/api/v1/webhooks/endpoints/{endpointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhooksList operation.
     * @callback module:api/WebhookEndpointsApi~v1WebhooksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CursorPageEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webhook endpoints
     * List webhook endpoints
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor 
     * @param {Number} opts.limit The number of records to return default: 20
     * @param {module:api/WebhookEndpointsApi~v1WebhooksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CursorPageEndpoint}
     */
    v1WebhooksList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CursorPageEndpoint;
      return this.apiClient.callApi(
        '/api/v1/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhooksRetrieve operation.
     * @callback module:api/WebhookEndpointsApi~v1WebhooksRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webhook endpoint
     * Get specific webhook endpoint
     * @param {String} endpointId Endpoint ID
     * @param {module:api/WebhookEndpointsApi~v1WebhooksRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    v1WebhooksRetrieve(endpointId, callback) {
      let postBody = null;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling v1WebhooksRetrieve");
      }

      let pathParams = {
        'endpointId': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Endpoint;
      return this.apiClient.callApi(
        '/api/v1/webhooks/endpoints/{endpointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WebhooksUpdate operation.
     * @callback module:api/WebhookEndpointsApi~v1WebhooksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Endpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update webhook endpoint
     * Update specific webhook endpoint
     * @param {String} endpointId Endpoint ID
     * @param {module:model/UpdateEndpoint} updateEndpoint Request body
     * @param {module:api/WebhookEndpointsApi~v1WebhooksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Endpoint}
     */
    v1WebhooksUpdate(endpointId, updateEndpoint, callback) {
      let postBody = updateEndpoint;
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling v1WebhooksUpdate");
      }
      // verify the required parameter 'updateEndpoint' is set
      if (updateEndpoint === undefined || updateEndpoint === null) {
        throw new Error("Missing the required parameter 'updateEndpoint' when calling v1WebhooksUpdate");
      }

      let pathParams = {
        'endpointId': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'SignatureAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Endpoint;
      return this.apiClient.callApi(
        '/api/v1/webhooks/endpoints/{endpointId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
