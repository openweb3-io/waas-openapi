/**
 * WaaS OpenAPI Documentation
 * This is a WaaS OpenAPI Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Fee model module.
 * @module model/Fee
 * @version 1.0
 */
class Fee {
    /**
     * Constructs a new <code>Fee</code>.
     * Fee
     * @alias module:model/Fee
     * @param maxFeeAmount {String} Max fee amount
     * @param tokenId {String} Token ID
     * @param type {Number} Fee type
     */
    constructor(maxFeeAmount, tokenId, type) { 
        
        Fee.initialize(this, maxFeeAmount, tokenId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, maxFeeAmount, tokenId, type) { 
        obj['maxFeeAmount'] = maxFeeAmount;
        obj['tokenId'] = tokenId;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Fee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Fee} obj Optional instance to populate.
     * @return {module:model/Fee} The populated <code>Fee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Fee();

            if (data.hasOwnProperty('maxFeeAmount')) {
                obj['maxFeeAmount'] = ApiClient.convertToType(data['maxFeeAmount'], 'String');
            }
            if (data.hasOwnProperty('tokenId')) {
                obj['tokenId'] = ApiClient.convertToType(data['tokenId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Fee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Fee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Fee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['maxFeeAmount'] && !(typeof data['maxFeeAmount'] === 'string' || data['maxFeeAmount'] instanceof String)) {
            throw new Error("Expected the field `maxFeeAmount` to be a primitive type in the JSON string but got " + data['maxFeeAmount']);
        }
        // ensure the json data is a string
        if (data['tokenId'] && !(typeof data['tokenId'] === 'string' || data['tokenId'] instanceof String)) {
            throw new Error("Expected the field `tokenId` to be a primitive type in the JSON string but got " + data['tokenId']);
        }

        return true;
    }


}

Fee.RequiredProperties = ["maxFeeAmount", "tokenId", "type"];

/**
 * Max fee amount
 * @member {String} maxFeeAmount
 */
Fee.prototype['maxFeeAmount'] = undefined;

/**
 * Token ID
 * @member {String} tokenId
 */
Fee.prototype['tokenId'] = undefined;

/**
 * Fee type
 * @member {Number} type
 */
Fee.prototype['type'] = undefined;






export default Fee;

