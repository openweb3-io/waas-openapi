/**
 * WaaS OpenAPI Documentation
 * This is a WaaS OpenAPI Server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Fee from './Fee';
import TransactionEndpoint from './TransactionEndpoint';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('chain')) {
                obj['chain'] = ApiClient.convertToType(data['chain'], 'String');
            }
            if (data.hasOwnProperty('chainId')) {
                obj['chainId'] = ApiClient.convertToType(data['chainId'], 'String');
            }
            if (data.hasOwnProperty('confirmedNum')) {
                obj['confirmedNum'] = ApiClient.convertToType(data['confirmedNum'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = TransactionEndpoint.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = ApiClient.convertToType(data['extra'], {'String': Object});
            }
            if (data.hasOwnProperty('failedReason')) {
                obj['failedReason'] = ApiClient.convertToType(data['failedReason'], 'String');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = Fee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = TransactionEndpoint.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tokenId')) {
                obj['tokenId'] = ApiClient.convertToType(data['tokenId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('walletId')) {
                obj['walletId'] = ApiClient.convertToType(data['walletId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        // ensure the json data is a string
        if (data['chain'] && !(typeof data['chain'] === 'string' || data['chain'] instanceof String)) {
            throw new Error("Expected the field `chain` to be a primitive type in the JSON string but got " + data['chain']);
        }
        // ensure the json data is a string
        if (data['chainId'] && !(typeof data['chainId'] === 'string' || data['chainId'] instanceof String)) {
            throw new Error("Expected the field `chainId` to be a primitive type in the JSON string but got " + data['chainId']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          TransactionEndpoint.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['failedReason'] && !(typeof data['failedReason'] === 'string' || data['failedReason'] instanceof String)) {
            throw new Error("Expected the field `failedReason` to be a primitive type in the JSON string but got " + data['failedReason']);
        }
        // validate the optional field `fee`
        if (data['fee']) { // data not null
          Fee.validateJSON(data['fee']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          TransactionEndpoint.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tokenId'] && !(typeof data['tokenId'] === 'string' || data['tokenId'] instanceof String)) {
            throw new Error("Expected the field `tokenId` to be a primitive type in the JSON string but got " + data['tokenId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updatedAt'] && !(typeof data['updatedAt'] === 'string' || data['updatedAt'] instanceof String)) {
            throw new Error("Expected the field `updatedAt` to be a primitive type in the JSON string but got " + data['updatedAt']);
        }
        // ensure the json data is a string
        if (data['walletId'] && !(typeof data['walletId'] === 'string' || data['walletId'] instanceof String)) {
            throw new Error("Expected the field `walletId` to be a primitive type in the JSON string but got " + data['walletId']);
        }

        return true;
    }


}



/**
 * Asset ID
 * @member {String} assetId
 */
Transaction.prototype['assetId'] = undefined;

/**
 * Chain
 * @member {String} chain
 */
Transaction.prototype['chain'] = undefined;

/**
 * Chain ID
 * @member {String} chainId
 */
Transaction.prototype['chainId'] = undefined;

/**
 * Confirmed number
 * @member {Number} confirmedNum
 */
Transaction.prototype['confirmedNum'] = undefined;

/**
 * Created time
 * @member {String} createdAt
 */
Transaction.prototype['createdAt'] = undefined;

/**
 * Description
 * @member {String} description
 */
Transaction.prototype['description'] = undefined;

/**
 * @member {module:model/TransactionEndpoint} destination
 */
Transaction.prototype['destination'] = undefined;

/**
 * Extra
 * @member {Object.<String, Object>} extra
 */
Transaction.prototype['extra'] = undefined;

/**
 * Failed reason
 * @member {String} failedReason
 */
Transaction.prototype['failedReason'] = undefined;

/**
 * @member {module:model/Fee} fee
 */
Transaction.prototype['fee'] = undefined;

/**
 * Transaction hash
 * @member {String} hash
 */
Transaction.prototype['hash'] = undefined;

/**
 * Transaction ID
 * @member {String} id
 */
Transaction.prototype['id'] = undefined;

/**
 * Signature
 * @member {String} signature
 */
Transaction.prototype['signature'] = undefined;

/**
 * @member {module:model/TransactionEndpoint} source
 */
Transaction.prototype['source'] = undefined;

/**
 * Transaction status
 * @member {String} status
 */
Transaction.prototype['status'] = undefined;

/**
 * Token ID
 * @member {String} tokenId
 */
Transaction.prototype['tokenId'] = undefined;

/**
 * Transaction type
 * @member {String} type
 */
Transaction.prototype['type'] = undefined;

/**
 * The custom unique transaction identifier
 * @member {String} uid
 */
Transaction.prototype['uid'] = undefined;

/**
 * Updated time
 * @member {String} updatedAt
 */
Transaction.prototype['updatedAt'] = undefined;

/**
 * Wallet ID
 * @member {String} walletId
 */
Transaction.prototype['walletId'] = undefined;






export default Transaction;

